# .github/workflows/**main.yml**
name: Django-app workflow

on: [push]

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.10.6

    - name: Install dependencies
      run: | 
        # обновление pip
        python -m pip install --upgrade pip 
        # установка flake8 и его плагинов
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
        # установка зависимостей
        cd backend
        pip install -r requirements.txt 

    - name: Test with flake8
      run: python -m flake8 backend/

  build_push_images:
    name: Push images to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
    - name: Checking repo
      uses: actions/checkout@v2

    - name: Set up Docker buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to docker
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push backend to docker
      uses: docker/build-push-action@v2
      with:
        push: true
        context: backend/
        tags: rbychin/foodgram_backend:latest

#    - name: Push frontend to docker
#      uses: docker/build-push-action@v2
#      with:
#        push: true
#        context: frontend/
#        tags: rbychin/foodgram_frontend:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_push_images
    steps:
      - name: Set up Docker environment
        run: sudo chmod 666 /var/run/docker.sock

      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            # Pull docker images from docker hub
            cd infra
            sudo docker-compose stop
            sudo docker rmi rbychin/foodgram_backend --force
            touch .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            sudo docker-compose up -d